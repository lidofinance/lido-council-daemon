/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/keys': {
    /** Get list of all keys in stream */
    get: operations['KeysController_get'];
  };
  '/v1/keys/{pubkey}': {
    /** Get detailed information about pubkey */
    get: operations['KeysController_getByPubkey'];
  };
  '/v1/keys/find': {
    /** Get list of found keys in DB from pubkey list */
    post: operations['KeysController_getByPubkeys'];
  };
  '/v1/modules': {
    /** Get list of modules supported in API. */
    get: operations['SRModulesController_getModules'];
  };
  '/v1/modules/{module_id}': {
    /** Get detailed information about staking router module. */
    get: operations['SRModulesController_getModule'];
  };
  '/v1/modules/keys': {
    /** Get keys for all modules grouped by staking router module. */
    get: operations['SRModulesKeysController_getGroupedByModuleKeys'];
  };
  '/v1/modules/{module_id}/keys': {
    /** Staking router module keys. */
    get: operations['SRModulesKeysController_getModuleKeys'];
  };
  '/v1/modules/{module_id}/keys/find': {
    /** Get list of found staking router module keys in db from pubkey list. */
    post: operations['SRModulesKeysController_getModuleKeysByPubkeys'];
  };
  '/v1/modules/{module_id}/validators/validator-exits-to-prepare/{operator_id}': {
    /** Get list of N oldest lido validators */
    get: operations['SRModulesValidatorsController_getOldestValidators'];
  };
  '/v1/modules/{module_id}/validators/generate-unsigned-exit-messages/{operator_id}': {
    /** Get list of exit messages for N oldest lido validators */
    get: operations['SRModulesValidatorsController_getMessagesForOldestValidators'];
  };
  '/v1/operators': {
    /** Get operators for all modules grouped by staking router module. */
    get: operations['SRModulesOperatorsController_get'];
  };
  '/v1/modules/{module_id}/operators': {
    /** Staking router module operators. */
    get: operations['SRModulesOperatorsController_getModuleOperators'];
  };
  '/v1/modules/{module_id}/operators/{operator_id}': {
    /** Staking router module operator. */
    get: operations['SRModulesOperatorsController_getModuleOperator'];
  };
  '/v1/modules/{module_id}/operators/keys': {
    /** Staking router module operators. */
    get: operations['SRModulesOperatorsKeysController_getOperatorsKeys'];
  };
  '/v1/status': {
    /** Get status of Keys API */
    get: operations['StatusController_get'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Key: {
      /** @description Key index */
      index: number;
      /** @description Public key */
      key: string;
      /** @description Signing key */
      depositSignature: string;
      /** @description Operator index */
      operatorIndex: number;
      /** @description Used key status */
      used: boolean;
      /** @description Module address */
      moduleAddress: string;
    };
    ELBlockSnapshot: {
      /** @description Block number */
      blockNumber: number;
      /** @description Block hash */
      blockHash: string;
      /** @description Block timestamp */
      timestamp: number;
    };
    ELMeta: {
      /** @description Execution layer block information */
      elBlockSnapshot: components['schemas']['ELBlockSnapshot'];
    };
    KeyListResponse: {
      /** @description List of keys for all modules */
      data: components['schemas']['Key'][];
      /** @description Meta */
      meta: components['schemas']['ELMeta'] | null;
    };
    TooEarlyResponse: {
      /**
       * @default 425
       * @enum {number}
       */
      statusCode: 425;
      /**
       * @default Too early response
       * @enum {string}
       */
      message: 'Too early response';
    };
    NotFoundException: Record<string, never>;
    KeysFindBody: {
      /** @description Public keys list */
      pubkeys: string[];
    };
    StakingModuleResponse: {
      /** @description Counter that MUST change value if keys were added, removed, node operator was activated/deactivated,  a node operator's ready to deposit keys count is changed */
      nonce: number;
      /** @description Type of module */
      type: string;
      /** @description Unique id of the module */
      id: number;
      /** @description Address of module */
      stakingModuleAddress: string;
      /** @description Reward fee of the module */
      moduleFee: number;
      /** @description Treasury fee */
      treasuryFee: number;
      /** @description Target percent of total keys in protocol, in BP */
      targetShare: number;
      /** @description Module status if module can not accept the deposits or can participate in further reward distribution */
      status: number;
      /** @description Name of module */
      name: string;
      /** @description block.timestamp of the last deposit of the module */
      lastDepositAt: number;
      /** @description block.number of the last deposit of the module */
      lastDepositBlock: number | null;
      /** @description Exited validators count */
      exitedValidatorsCount: number;
      /** @description Module activation status */
      active: boolean;
    };
    SRModuleListResponse: {
      /** @description List of staking router modules with detailed information */
      data: components['schemas']['StakingModuleResponse'][];
      /** @description Execution layer block information */
      elBlockSnapshot: components['schemas']['ELBlockSnapshot'];
    };
    SRModuleResponse: {
      /** @description Detailed staking router module information */
      data: components['schemas']['StakingModuleResponse'];
      /** @description Execution layer block information */
      elBlockSnapshot: components['schemas']['ELBlockSnapshot'];
    };
    KeyListWithModule: {
      /** @description Keys of staking router module */
      keys: components['schemas']['Key'][];
      /** @description Detailed Staking Router information */
      module: components['schemas']['StakingModuleResponse'];
    };
    GroupedByModuleKeyListResponse: {
      /** @description Keys for all modules grouped by staking router module */
      data: components['schemas']['KeyListWithModule'][];
      meta: components['schemas']['ELMeta'] | null;
    };
    SRKeyListWithModule: {
      /** @description Keys of staking router module */
      keys: components['schemas']['Key'][];
      /** @description Detailed Staking Router information */
      module: components['schemas']['StakingModuleResponse'];
    };
    SRModuleKeyListResponse: {
      /** @description Staking router module keys. */
      data: components['schemas']['SRKeyListWithModule'] | null;
      meta: components['schemas']['ELMeta'] | null;
    };
    ExitValidator: {
      /** @description Index of validator. */
      validatorIndex: number;
      /** @description Public key */
      key: string;
    };
    CLBlockSnapshot: {
      /** @description Current epoch */
      epoch: number;
      /** @description Slot root */
      root: string;
      /** @description Slot value */
      slot: number;
      /** @description Block number */
      blockNumber: number;
      /** @description Block timestamp */
      timestamp: number;
      /** @description Block hash */
      blockHash: string;
    };
    CLMeta: {
      /** @description Consensus layer block information */
      clBlockSnapshot: components['schemas']['CLBlockSnapshot'];
    };
    ExitValidatorListResponse: {
      /** @description N oldest validators for current epoch when voluntary exit can be processed */
      data: components['schemas']['ExitValidator'][];
      /** @description Meta for voluntary exit endpoints */
      meta: components['schemas']['CLMeta'] | null;
    };
    InternalServerErrorException: Record<string, never>;
    ExitPresignMessage: {
      /** @description Index of validator. */
      validator_index: string;
      /** @description Finalized epoch. */
      epoch: string;
    };
    ExitPresignMessageListResponse: {
      /** @description Voluntary exit message list */
      data: components['schemas']['ExitPresignMessage'][];
      /** @description Meta for voluntary exit endpoints */
      meta: components['schemas']['CLMeta'] | null;
    };
    Operator: {
      /** @description Index of Operator */
      index: number;
      /** @description This value shows if node operator active */
      active: boolean;
      /** @description Operator name */
      name: string;
      /** @description Ethereum 1 address which receives stETH rewards for this operator */
      rewardAddress: string;
      /** @description The number of keys vetted by the DAO and that can be used for the deposit */
      stakingLimit: number;
      /** @description Amount of stopped validators */
      stoppedValidators: number;
      /** @description Total signing keys amount */
      totalSigningKeys: number;
      /** @description Amount of used signing keys */
      usedSigningKeys: number;
      /** @description Module address */
      moduleAddress: string;
    };
    OperatorListAndSRModule: {
      /** @description Operators of staking router module */
      operators: components['schemas']['Operator'][];
      /** @description Detailed Staking Router information */
      module: components['schemas']['StakingModuleResponse'];
    };
    GroupedByModuleOperatorListResponse: {
      /** @description Operators for all modules grouped by staking router module */
      data: components['schemas']['OperatorListAndSRModule'][];
      meta: components['schemas']['ELMeta'] | null;
    };
    SRModuleOperatorListResponse: {
      /** @description Staking router module operators. */
      data: components['schemas']['OperatorListAndSRModule'] | null;
      meta: components['schemas']['ELMeta'] | null;
    };
    OperatorAndSRModule: {
      /** @description Operator of staking router module */
      operator: components['schemas']['Operator'][];
      /** @description Detailed Staking Router information */
      module: components['schemas']['StakingModuleResponse'];
    };
    SRModuleOperatorResponse: {
      /** @description Staking router module keys. */
      data: components['schemas']['OperatorAndSRModule'] | null;
      meta: components['schemas']['ELMeta'] | null;
    };
    SROperatorsKeysModule: {
      /** @description Operators of staking router module */
      operators: components['schemas']['Operator'][];
      /** @description Keys of staking router module */
      keys: components['schemas']['Key'][];
      /** @description Detailed Staking Router information */
      module: components['schemas']['StakingModuleResponse'];
    };
    SRModuleOperatorsKeysResponse: {
      /** @description Staking router module keys. */
      data: components['schemas']['SROperatorsKeysModule'] | null;
      meta: components['schemas']['ELMeta'] | null;
    };
    Status: {
      /** @description App version */
      appVersion: string;
      /** @description Chain id */
      chainId: number;
      /** @description Execution layer block information */
      elBlockSnapshot: components['schemas']['ELBlockSnapshot'] | null;
      /** @description Consensus layer block information */
      clBlockSnapshot: components['schemas']['CLBlockSnapshot'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Get list of all keys in stream */
  KeysController_get: {
    parameters: {
      query?: {
        /** @description Filter to get used keys. Possible values: true/false. If this value is not specified endpoint will return all keys. */
        used?: boolean;
        /** @description Filter for operator with specified index. If this value is not specified endpoint will return keys for all operators. */
        operatorIndex?: number;
      };
    };
    responses: {
      /** @description List of all keys */
      200: {
        content: {
          'application/json': components['schemas']['KeyListResponse'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get detailed information about pubkey */
  KeysController_getByPubkey: {
    parameters: {
      path: {
        /** @description Public key */
        pubkey: string;
      };
    };
    responses: {
      /** @description List of all keys */
      200: {
        content: {
          'application/json': components['schemas']['KeyListResponse'];
        };
      };
      /** @description Provided pubkey was not found */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get list of found keys in DB from pubkey list */
  KeysController_getByPubkeys: {
    requestBody: {
      content: {
        'application/json': components['schemas']['KeysFindBody'];
      };
    };
    responses: {
      /** @description Staking Router module keys. */
      200: {
        content: {
          'application/json': components['schemas']['KeyListResponse'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get list of modules supported in API. */
  SRModulesController_getModules: {
    responses: {
      /** @description List of all modules supported in API */
      200: {
        content: {
          'application/json': components['schemas']['SRModuleListResponse'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get detailed information about staking router module. */
  SRModulesController_getModule: {
    parameters: {
      path: {
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    responses: {
      /** @description Staking router module detailed information. */
      200: {
        content: {
          'application/json': components['schemas']['SRModuleResponse'];
        };
      };
      /** @description Provided module is not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get keys for all modules grouped by staking router module. */
  SRModulesKeysController_getGroupedByModuleKeys: {
    parameters: {
      query?: {
        /** @description Filter to get used keys. Possible values: true/false. If this value is not specified endpoint will return all keys. */
        used?: boolean;
        /** @description Filter for operator with specified index. If this value is not specified endpoint will return keys for all operators. */
        operatorIndex?: number;
      };
    };
    responses: {
      /** @description Keys for all modules are grouped by the staking router module. Receiving results from this endpoint may take some time, so please use it carefully. */
      200: {
        content: {
          'application/json': components['schemas']['GroupedByModuleKeyListResponse'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Staking router module keys. */
  SRModulesKeysController_getModuleKeys: {
    parameters: {
      query?: {
        /** @description Filter to get used keys. Possible values: true/false. If this value is not specified endpoint will return all keys. */
        used?: boolean;
        /** @description Filter for operator with specified index. If this value is not specified endpoint will return keys for all operators. */
        operatorIndex?: number;
      };
      path: {
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    responses: {
      /** @description List of all modules supported in API */
      200: {
        content: {
          'application/json': components['schemas']['SRModuleKeyListResponse'];
        };
      };
      /** @description Provided module is not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get list of found staking router module keys in db from pubkey list. */
  SRModulesKeysController_getModuleKeysByPubkeys: {
    parameters: {
      path: {
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['KeysFindBody'];
      };
    };
    responses: {
      /** @description Staking Router module keys. */
      200: {
        content: {
          'application/json': components['schemas']['SRModuleKeyListResponse'];
        };
      };
      /** @description Provided module is not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get list of N oldest lido validators */
  SRModulesValidatorsController_getOldestValidators: {
    parameters: {
      query?: {
        /** @description Number of validators to exit. If validators number less than amount, return all validators. */
        max_amount?: number;
        /** @description Percent of validators to exit. Default value is 10. Percent has a higher priority than max_amount */
        percent?: number;
      };
      path: {
        /** @description Operator index */
        operator_id: number;
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    responses: {
      /** @description N oldest lido validators for operator. */
      200: {
        content: {
          'application/json': components['schemas']['ExitValidatorListResponse'];
        };
      };
      /** @description Provided module or operator are not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
      /** @description Disabled endpoint/ Last Execution Layer block number in our database older than last Consensus Layer */
      500: {
        content: {
          'application/json': components['schemas']['InternalServerErrorException'];
        };
      };
    };
  };
  /** Get list of exit messages for N oldest lido validators */
  SRModulesValidatorsController_getMessagesForOldestValidators: {
    parameters: {
      query?: {
        /** @description Number of validators to exit. If validators number less than amount, return all validators. */
        max_amount?: number;
        /** @description Percent of validators to exit. Default value is 10. Percent has a higher priority than max_amount */
        percent?: number;
      };
      path: {
        /** @description Operator index */
        operator_id: number;
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    responses: {
      /** @description Exit messages for N oldest lido validators of operator */
      200: {
        content: {
          'application/json': components['schemas']['ExitPresignMessageListResponse'];
        };
      };
      /** @description Provided module or operator are not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
      /** @description Disabled endpoint/ Last Execution Layer block number in our database older than last Consensus Layer */
      500: {
        content: {
          'application/json': components['schemas']['InternalServerErrorException'];
        };
      };
    };
  };
  /** Get operators for all modules grouped by staking router module. */
  SRModulesOperatorsController_get: {
    responses: {
      /** @description Operators for all modules grouped by staking router module. */
      200: {
        content: {
          'application/json': components['schemas']['GroupedByModuleOperatorListResponse'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Staking router module operators. */
  SRModulesOperatorsController_getModuleOperators: {
    parameters: {
      path: {
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    responses: {
      /** @description List of all SR module operators */
      200: {
        content: {
          'application/json': components['schemas']['SRModuleOperatorListResponse'];
        };
      };
      /** @description Provided module is not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Staking router module operator. */
  SRModulesOperatorsController_getModuleOperator: {
    parameters: {
      path: {
        /** @description Operator index */
        operator_id: number;
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    responses: {
      /** @description SR module operator */
      200: {
        content: {
          'application/json': components['schemas']['SRModuleOperatorResponse'];
        };
      };
      /** @description Provided module or operator are not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Staking router module operators. */
  SRModulesOperatorsKeysController_getOperatorsKeys: {
    parameters: {
      query?: {
        /** @description Filter to get used keys. Possible values: true/false. If this value is not specified endpoint will return all keys. */
        used?: boolean;
        /** @description Filter for operator with specified index. If this value is not specified endpoint will return keys for all operators. */
        operatorIndex?: number;
      };
      path: {
        /** @description Staking router module_id or contract address. */
        module_id: string;
      };
    };
    responses: {
      /** @description List of all SR module operators */
      200: {
        content: {
          'application/json': components['schemas']['SRModuleOperatorsKeysResponse'];
        };
      };
      /** @description Provided module is not supported */
      404: {
        content: {
          'application/json': components['schemas']['NotFoundException'];
        };
      };
      /** @description Meta is null, maybe data hasn't been written in db yet */
      425: {
        content: {
          'application/json': components['schemas']['TooEarlyResponse'];
        };
      };
    };
  };
  /** Get status of Keys API */
  StatusController_get: {
    responses: {
      /** @description Keys API status */
      200: {
        content: {
          'application/json': components['schemas']['Status'];
        };
      };
    };
  };
}
